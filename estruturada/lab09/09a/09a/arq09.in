/* lab08b: Processamento de imagens
 * Autor Thiago da Silva Arruda.
 * <thiago.arruda@students.ic.unicamp.br>
 */

#include <stdio.h>
#include <string.h>

/* Le o proximo inteiro da entrada padrao, ignorando comentarios */
int prox_int() {
  int x;
  int lido = 0;

  while(!lido){
    scanf("%*[ ]s");
    if (scanf("%d", &x)) { 
      lido = 1; 
    } else {
      scanf("%*[#]c"); 
      scanf("%*[^\n]"); 
      scanf("%*[\n]"); 
    }
  }
  return x;
}

/* Le uma imagem em formato PGM a partir da entrada padrao.
 * Retorna 1 se a leitura for realmente de um arquivo PGM
 * e 0 caso contrario */
int ler_pgm(int img[][400],int *W, int *H, int *MaxV, int *F, int *P) {
  char nome_formato[3];
  char c;
  int i,j;

  /* Le o formato da imagem. P2 indica o formato PGM */
  scanf("%s ", nome_formato);
  if (strcmp(nome_formato, "P2") != 0)
    return 0;

  /* Le o '#', que indica um comentario, e os numeros indicando
   * o filtro e o parametro, se houver */
  scanf("%[#]c", &c);
  *F = prox_int();
  if(*F == 3)
    *P = prox_int(); 
  
  /* Le dimensoes da imagem */
  *W = prox_int();
  *H = prox_int();

  /* Le intensidade maxima */
  *MaxV = prox_int();

  /* Le o valor de cada pixel da imagem */
  for (i = 0; i < *H; i++) {
    for (j = 0; j < *W; j++) {
      img[i][j] = prox_int();
    }
  }

  return 1;
}

/* Escreve a imagem em formato pgm na saida padrao */
void escrever_pgm(int img[][400], int W, int H, int MaxV) {
  int i, j;

  /* Escreve os atributos da imagem */
  printf("P2\n"); /* Tipo da imagem. P2 significa pgm*/
  printf("%d %d", W, H); /* Dimensoes da imagem */
  printf(" %d\n", MaxV); /* Intensidade maxima */

  /* Escreve os pixels da imagem */
  for (i = 0; i < H; i++) {
    printf("%d", img[i][0]);
    for (j = 1; j < W; j++) {
      printf(" %d", img[i][j]);
    }
    printf("\n");
  }
}

/* Calcula a intensidade media dos pixels de uma imagem */
/* float media(int img[][400], int W, int H) {
  int i, j;
  float soma = 0;
  
  for (i = 0; i < H; i++) {
    for (j = 0; j < W; j++) {
      soma += img[i][j];
    }
  }
  
  return soma / (W * H);  
} */

/* Troca os valores de duas variaveis inteiras */
void troca(int *x, int *y) {
  int aux = *x;
  *x = *y;
  *y = aux;
}

/* Computa a mediana do vetor (supondo que o vetor tem tamanho impar) */
int mediana(int vet[], int size) {
  int i, j, min;
  
  /* Ordena o vetor ate a metade */
  for (i = 0; i <= size / 2; i++) {
    min = i;
    for (j = i + 1; j < size; j++)
      if (vet[j] < vet[min])
        min = j;
    troca(&vet[i], &vet[min]);
  }

  /* Retorna a mediana */
  return vet[size / 2];
}

/* Filtro de limiarizacao */
void filtro1(int img[][400], int W, int H, int MaxV) {  
  int i, j;
  /* Utiliza a intensidade media como limiar */
  // float M = media(img, W, H);
  float M = 0.0;	  

  for (i = 0; i < H; i++) {
    for (j = 0; j < W; j++) {
      /* Define a nova intensidade do pixel (i,j) como
       * MaxV se maior que a intensidade media ou 0,
       * caso contrario */
      if (img[i][j] <= M)
        img[i][j] = 0;
      else
        img[i][j] = MaxV;
    }
  }
}

/* Filtro para espelhar horizontalmente a imagem */
void filtro2(int img[][400], int W, int H) {
  int i, j;
  
  for (i = 0; i < H; i++)
    for (j = 0; j < W/2; j++)
      /* Troca (i,j) com seu correspondente espelhado */
      troca(&img[i][j], &img[i][W-j-1]);
}

/* Filtro para calcular um rotacionamento horizontal de tamanho P */
void filtro3(int img[][400], int W, int H, int P) {  
  int i, j;
  /* Vetor auxiliar para aplicar o filtro */ 
  int aux[400];

  for (i = 0; i < H; i++) {
    /* Computa o rotacionamento horizontal da linha i no vetor auxiliar */
    for (j = 0; j < W; j++)
      aux[j] = img[i][(j + P) % W]; 
    /* Copia o conteudo do vetor auxiliar de volta para a imagem */
    for (j = 0; j < W; j++)
      img[i][j] = aux[j];
  }
}

/* Filtro de mediana com 3-vizinhanca */
void filtro4(int img[][400], int W, int H) {
  /* Matriz auxiliar para aplicar o filtro */  
  int img2[400][400];  
  int i, j, x, y, z;

  /* vetor auxiliar para armazenar a 3-vizinhanca de um pixel */
  int vet[9];

  for (i = 1; i < H - 1; i++) {
    for (j = 1; j < W - 1; j++) {
      z = 0;

      /* Obtem a 3-vizinhanca do pixel (i,j) */
      for (x = i - 1; x <= i + 1; x++)
        for (y = j - 1; y <= j + 1; y++)
          vet[z++] = img[x][y];
      
      /* O pixel (i,j) passa ter a intensidade da mediana da sua
         3-vizinhanca */
      img2[i][j] = mediana(vet, z);
    }
  }
  
  /* Copia as novas intensidades para a imagem original */
  for (i = 1; i < H - 1; i++)
    for (j = 1; j < W - 1; j++)
      img[i][j] = img2[i][j];
}

int main() {
  /* Matriz que armazena os pixels da imagem */
  int img[400][400]; 
 
  /* Atributos da imagem */
  int W, H, MaxV;

  /* Identificador do filtro a ser utilizado */
  int F;
  /* Parametro a ser passado para o filtro */
  int P;

  /* Le a imagem */
  if (ler_pgm(img, &W, &H, &MaxV, &F, &P) != 1) {
    printf("Error: nao foi possivel ler a imagem\n");
    return 0;
  }

  /* Seleciona o filtro */
  /* switch (F) {
  case 1:
    filtro1(img, W, H, MaxV);
    break;
  case 2:
    filtro2(img, W, H);
    break;
  case 3:
    filtro3(img, W, H, P);
    break;
  case 4:
    filtro4(img, W, H);
    break;
  } */

  /* Escreve a imagem */
  escrever_pgm(img, W, H, MaxV);

  return 0;
}
